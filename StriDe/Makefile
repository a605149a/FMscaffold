# Makefile.in generated by automake 1.11.1 from Makefile.am.
# StriDe/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/stride
pkgincludedir = $(includedir)/stride
pkglibdir = $(libdir)/stride
pkglibexecdir = $(libexecdir)/stride
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = stride$(EXEEXT)
subdir = StriDe
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/m4_ax_openmp.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_stride_OBJECTS = stride-StriDe.$(OBJEXT) stride-strideall.$(OBJEXT) \
	stride-index.$(OBJEXT) stride-overlap.$(OBJEXT) \
	stride-assemble.$(OBJEXT) stride-correct.$(OBJEXT) \
	stride-oview.$(OBJEXT) stride-preprocess.$(OBJEXT) \
	stride-subgraph.$(OBJEXT) stride-filter.$(OBJEXT) \
	stride-fm-merge.$(OBJEXT) stride-OverlapCommon.$(OBJEXT) \
	stride-kmerfreq.$(OBJEXT) stride-grep.$(OBJEXT) \
	stride-FMIndexWalk.$(OBJEXT) stride-scaffold.$(OBJEXT)
stride_OBJECTS = $(am_stride_OBJECTS)
stride_DEPENDENCIES = $(top_builddir)/StringGraph/libstringgraph.a \
	$(top_builddir)/Concurrency/libconcurrency.a \
	$(top_builddir)/Algorithm/libalgorithm.a \
	$(top_builddir)/SuffixTools/libsuffixtools.a \
	$(top_builddir)/Bigraph/libbigraph.a \
	$(top_builddir)/Util/libutil.a $(top_builddir)/SQG/libsqg.a \
	$(top_builddir)/Thirdparty/libthirdparty.a \
	$(top_builddir)/FMIndexWalk/libfmindexwalk.a
stride_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(stride_LDFLAGS) \
	$(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(stride_SOURCES)
DIST_SOURCES = $(stride_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run aclocal-1.11
AMTAR = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run tar
AM_CXXFLAGS = -Wall -Wextra -Werror -Wno-unknown-pragmas
AUTOCONF = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run autoconf
AUTOHEADER = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run autoheader
AUTOMAKE = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -O3
CPPFLAGS =  -fopenmp 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -fopenmp  
LIBOBJS = 
LIBS = -lz
LTLIBOBJS = 
MAKEINFO = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = stride
PACKAGE_BUGREPORT = ythuang@cs.ccu.edu.tw
PACKAGE_NAME = StriDe
PACKAGE_STRING = StriDe 0.0.1
PACKAGE_TARNAME = stride
PACKAGE_VERSION = 0.0.1
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.0.1
abs_builddir = /bip7_disk/yuting103/Scaffold_work/StriDe_v2/StriDe
abs_srcdir = /bip7_disk/yuting103/Scaffold_work/StriDe_v2/StriDe
abs_top_builddir = /bip7_disk/yuting103/Scaffold_work/StriDe_v2
abs_top_srcdir = /bip7_disk/yuting103/Scaffold_work/StriDe_v2
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /bip7_disk/yuting103/Scaffold_work/StriDe_v2/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
stride_CPPFLAGS = \
	-I$(top_srcdir)/Util \
	-I$(top_srcdir)/Bigraph \
	-I$(top_srcdir)/SuffixTools \
	-I$(top_srcdir)/StringGraph \
	-I$(top_srcdir)/Concurrency \
	-I$(top_srcdir)/Algorithm \
	-I$(top_srcdir)/SQG \
	-I$(top_srcdir)/Thirdparty \
	-I$(top_srcdir)/FMIndexWalk

stride_LDADD = \
	$(top_builddir)/StringGraph/libstringgraph.a \
	$(top_builddir)/Concurrency/libconcurrency.a \
	$(top_builddir)/Algorithm/libalgorithm.a \
	$(top_builddir)/SuffixTools/libsuffixtools.a \
	$(top_builddir)/Bigraph/libbigraph.a \
	$(top_builddir)/Util/libutil.a \
	$(top_builddir)/SQG/libsqg.a \
	$(top_builddir)/Thirdparty/libthirdparty.a \
	$(top_builddir)/FMIndexWalk/libfmindexwalk.a

stride_LDFLAGS = -pthread
stride_SOURCES = StriDe.cpp \
		strideall.cpp strideall.h\
              index.cpp index.h \
              overlap.cpp overlap.h \
              assemble.cpp assemble.h \
              correct.cpp correct.h \
              oview.cpp oview.h \
              preprocess.cpp preprocess.h \
              subgraph.cpp subgraph.h \
              filter.cpp filter.h \
              fm-merge.cpp fm-merge.h \
              OverlapCommon.h OverlapCommon.cpp \
		kmerfreq.h kmerfreq.cpp \
		grep.h grep.cpp \
		FMIndexWalk.h FMIndexWalk.cpp \
		scaffold.h scaffold.cpp \
              SGACommon.h 

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign StriDe/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign StriDe/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
stride$(EXEEXT): $(stride_OBJECTS) $(stride_DEPENDENCIES) 
	@rm -f stride$(EXEEXT)
	$(stride_LINK) $(stride_OBJECTS) $(stride_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/stride-FMIndexWalk.Po
include ./$(DEPDIR)/stride-OverlapCommon.Po
include ./$(DEPDIR)/stride-StriDe.Po
include ./$(DEPDIR)/stride-assemble.Po
include ./$(DEPDIR)/stride-correct.Po
include ./$(DEPDIR)/stride-filter.Po
include ./$(DEPDIR)/stride-fm-merge.Po
include ./$(DEPDIR)/stride-grep.Po
include ./$(DEPDIR)/stride-index.Po
include ./$(DEPDIR)/stride-kmerfreq.Po
include ./$(DEPDIR)/stride-overlap.Po
include ./$(DEPDIR)/stride-oview.Po
include ./$(DEPDIR)/stride-preprocess.Po
include ./$(DEPDIR)/stride-scaffold.Po
include ./$(DEPDIR)/stride-strideall.Po
include ./$(DEPDIR)/stride-subgraph.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

stride-StriDe.o: StriDe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-StriDe.o -MD -MP -MF $(DEPDIR)/stride-StriDe.Tpo -c -o stride-StriDe.o `test -f 'StriDe.cpp' || echo '$(srcdir)/'`StriDe.cpp
	$(am__mv) $(DEPDIR)/stride-StriDe.Tpo $(DEPDIR)/stride-StriDe.Po
#	source='StriDe.cpp' object='stride-StriDe.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-StriDe.o `test -f 'StriDe.cpp' || echo '$(srcdir)/'`StriDe.cpp

stride-StriDe.obj: StriDe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-StriDe.obj -MD -MP -MF $(DEPDIR)/stride-StriDe.Tpo -c -o stride-StriDe.obj `if test -f 'StriDe.cpp'; then $(CYGPATH_W) 'StriDe.cpp'; else $(CYGPATH_W) '$(srcdir)/StriDe.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-StriDe.Tpo $(DEPDIR)/stride-StriDe.Po
#	source='StriDe.cpp' object='stride-StriDe.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-StriDe.obj `if test -f 'StriDe.cpp'; then $(CYGPATH_W) 'StriDe.cpp'; else $(CYGPATH_W) '$(srcdir)/StriDe.cpp'; fi`

stride-strideall.o: strideall.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-strideall.o -MD -MP -MF $(DEPDIR)/stride-strideall.Tpo -c -o stride-strideall.o `test -f 'strideall.cpp' || echo '$(srcdir)/'`strideall.cpp
	$(am__mv) $(DEPDIR)/stride-strideall.Tpo $(DEPDIR)/stride-strideall.Po
#	source='strideall.cpp' object='stride-strideall.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-strideall.o `test -f 'strideall.cpp' || echo '$(srcdir)/'`strideall.cpp

stride-strideall.obj: strideall.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-strideall.obj -MD -MP -MF $(DEPDIR)/stride-strideall.Tpo -c -o stride-strideall.obj `if test -f 'strideall.cpp'; then $(CYGPATH_W) 'strideall.cpp'; else $(CYGPATH_W) '$(srcdir)/strideall.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-strideall.Tpo $(DEPDIR)/stride-strideall.Po
#	source='strideall.cpp' object='stride-strideall.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-strideall.obj `if test -f 'strideall.cpp'; then $(CYGPATH_W) 'strideall.cpp'; else $(CYGPATH_W) '$(srcdir)/strideall.cpp'; fi`

stride-index.o: index.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-index.o -MD -MP -MF $(DEPDIR)/stride-index.Tpo -c -o stride-index.o `test -f 'index.cpp' || echo '$(srcdir)/'`index.cpp
	$(am__mv) $(DEPDIR)/stride-index.Tpo $(DEPDIR)/stride-index.Po
#	source='index.cpp' object='stride-index.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-index.o `test -f 'index.cpp' || echo '$(srcdir)/'`index.cpp

stride-index.obj: index.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-index.obj -MD -MP -MF $(DEPDIR)/stride-index.Tpo -c -o stride-index.obj `if test -f 'index.cpp'; then $(CYGPATH_W) 'index.cpp'; else $(CYGPATH_W) '$(srcdir)/index.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-index.Tpo $(DEPDIR)/stride-index.Po
#	source='index.cpp' object='stride-index.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-index.obj `if test -f 'index.cpp'; then $(CYGPATH_W) 'index.cpp'; else $(CYGPATH_W) '$(srcdir)/index.cpp'; fi`

stride-overlap.o: overlap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-overlap.o -MD -MP -MF $(DEPDIR)/stride-overlap.Tpo -c -o stride-overlap.o `test -f 'overlap.cpp' || echo '$(srcdir)/'`overlap.cpp
	$(am__mv) $(DEPDIR)/stride-overlap.Tpo $(DEPDIR)/stride-overlap.Po
#	source='overlap.cpp' object='stride-overlap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-overlap.o `test -f 'overlap.cpp' || echo '$(srcdir)/'`overlap.cpp

stride-overlap.obj: overlap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-overlap.obj -MD -MP -MF $(DEPDIR)/stride-overlap.Tpo -c -o stride-overlap.obj `if test -f 'overlap.cpp'; then $(CYGPATH_W) 'overlap.cpp'; else $(CYGPATH_W) '$(srcdir)/overlap.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-overlap.Tpo $(DEPDIR)/stride-overlap.Po
#	source='overlap.cpp' object='stride-overlap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-overlap.obj `if test -f 'overlap.cpp'; then $(CYGPATH_W) 'overlap.cpp'; else $(CYGPATH_W) '$(srcdir)/overlap.cpp'; fi`

stride-assemble.o: assemble.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-assemble.o -MD -MP -MF $(DEPDIR)/stride-assemble.Tpo -c -o stride-assemble.o `test -f 'assemble.cpp' || echo '$(srcdir)/'`assemble.cpp
	$(am__mv) $(DEPDIR)/stride-assemble.Tpo $(DEPDIR)/stride-assemble.Po
#	source='assemble.cpp' object='stride-assemble.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-assemble.o `test -f 'assemble.cpp' || echo '$(srcdir)/'`assemble.cpp

stride-assemble.obj: assemble.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-assemble.obj -MD -MP -MF $(DEPDIR)/stride-assemble.Tpo -c -o stride-assemble.obj `if test -f 'assemble.cpp'; then $(CYGPATH_W) 'assemble.cpp'; else $(CYGPATH_W) '$(srcdir)/assemble.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-assemble.Tpo $(DEPDIR)/stride-assemble.Po
#	source='assemble.cpp' object='stride-assemble.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-assemble.obj `if test -f 'assemble.cpp'; then $(CYGPATH_W) 'assemble.cpp'; else $(CYGPATH_W) '$(srcdir)/assemble.cpp'; fi`

stride-correct.o: correct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-correct.o -MD -MP -MF $(DEPDIR)/stride-correct.Tpo -c -o stride-correct.o `test -f 'correct.cpp' || echo '$(srcdir)/'`correct.cpp
	$(am__mv) $(DEPDIR)/stride-correct.Tpo $(DEPDIR)/stride-correct.Po
#	source='correct.cpp' object='stride-correct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-correct.o `test -f 'correct.cpp' || echo '$(srcdir)/'`correct.cpp

stride-correct.obj: correct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-correct.obj -MD -MP -MF $(DEPDIR)/stride-correct.Tpo -c -o stride-correct.obj `if test -f 'correct.cpp'; then $(CYGPATH_W) 'correct.cpp'; else $(CYGPATH_W) '$(srcdir)/correct.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-correct.Tpo $(DEPDIR)/stride-correct.Po
#	source='correct.cpp' object='stride-correct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-correct.obj `if test -f 'correct.cpp'; then $(CYGPATH_W) 'correct.cpp'; else $(CYGPATH_W) '$(srcdir)/correct.cpp'; fi`

stride-oview.o: oview.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-oview.o -MD -MP -MF $(DEPDIR)/stride-oview.Tpo -c -o stride-oview.o `test -f 'oview.cpp' || echo '$(srcdir)/'`oview.cpp
	$(am__mv) $(DEPDIR)/stride-oview.Tpo $(DEPDIR)/stride-oview.Po
#	source='oview.cpp' object='stride-oview.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-oview.o `test -f 'oview.cpp' || echo '$(srcdir)/'`oview.cpp

stride-oview.obj: oview.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-oview.obj -MD -MP -MF $(DEPDIR)/stride-oview.Tpo -c -o stride-oview.obj `if test -f 'oview.cpp'; then $(CYGPATH_W) 'oview.cpp'; else $(CYGPATH_W) '$(srcdir)/oview.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-oview.Tpo $(DEPDIR)/stride-oview.Po
#	source='oview.cpp' object='stride-oview.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-oview.obj `if test -f 'oview.cpp'; then $(CYGPATH_W) 'oview.cpp'; else $(CYGPATH_W) '$(srcdir)/oview.cpp'; fi`

stride-preprocess.o: preprocess.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-preprocess.o -MD -MP -MF $(DEPDIR)/stride-preprocess.Tpo -c -o stride-preprocess.o `test -f 'preprocess.cpp' || echo '$(srcdir)/'`preprocess.cpp
	$(am__mv) $(DEPDIR)/stride-preprocess.Tpo $(DEPDIR)/stride-preprocess.Po
#	source='preprocess.cpp' object='stride-preprocess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-preprocess.o `test -f 'preprocess.cpp' || echo '$(srcdir)/'`preprocess.cpp

stride-preprocess.obj: preprocess.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-preprocess.obj -MD -MP -MF $(DEPDIR)/stride-preprocess.Tpo -c -o stride-preprocess.obj `if test -f 'preprocess.cpp'; then $(CYGPATH_W) 'preprocess.cpp'; else $(CYGPATH_W) '$(srcdir)/preprocess.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-preprocess.Tpo $(DEPDIR)/stride-preprocess.Po
#	source='preprocess.cpp' object='stride-preprocess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-preprocess.obj `if test -f 'preprocess.cpp'; then $(CYGPATH_W) 'preprocess.cpp'; else $(CYGPATH_W) '$(srcdir)/preprocess.cpp'; fi`

stride-subgraph.o: subgraph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-subgraph.o -MD -MP -MF $(DEPDIR)/stride-subgraph.Tpo -c -o stride-subgraph.o `test -f 'subgraph.cpp' || echo '$(srcdir)/'`subgraph.cpp
	$(am__mv) $(DEPDIR)/stride-subgraph.Tpo $(DEPDIR)/stride-subgraph.Po
#	source='subgraph.cpp' object='stride-subgraph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-subgraph.o `test -f 'subgraph.cpp' || echo '$(srcdir)/'`subgraph.cpp

stride-subgraph.obj: subgraph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-subgraph.obj -MD -MP -MF $(DEPDIR)/stride-subgraph.Tpo -c -o stride-subgraph.obj `if test -f 'subgraph.cpp'; then $(CYGPATH_W) 'subgraph.cpp'; else $(CYGPATH_W) '$(srcdir)/subgraph.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-subgraph.Tpo $(DEPDIR)/stride-subgraph.Po
#	source='subgraph.cpp' object='stride-subgraph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-subgraph.obj `if test -f 'subgraph.cpp'; then $(CYGPATH_W) 'subgraph.cpp'; else $(CYGPATH_W) '$(srcdir)/subgraph.cpp'; fi`

stride-filter.o: filter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-filter.o -MD -MP -MF $(DEPDIR)/stride-filter.Tpo -c -o stride-filter.o `test -f 'filter.cpp' || echo '$(srcdir)/'`filter.cpp
	$(am__mv) $(DEPDIR)/stride-filter.Tpo $(DEPDIR)/stride-filter.Po
#	source='filter.cpp' object='stride-filter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-filter.o `test -f 'filter.cpp' || echo '$(srcdir)/'`filter.cpp

stride-filter.obj: filter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-filter.obj -MD -MP -MF $(DEPDIR)/stride-filter.Tpo -c -o stride-filter.obj `if test -f 'filter.cpp'; then $(CYGPATH_W) 'filter.cpp'; else $(CYGPATH_W) '$(srcdir)/filter.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-filter.Tpo $(DEPDIR)/stride-filter.Po
#	source='filter.cpp' object='stride-filter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-filter.obj `if test -f 'filter.cpp'; then $(CYGPATH_W) 'filter.cpp'; else $(CYGPATH_W) '$(srcdir)/filter.cpp'; fi`

stride-fm-merge.o: fm-merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-fm-merge.o -MD -MP -MF $(DEPDIR)/stride-fm-merge.Tpo -c -o stride-fm-merge.o `test -f 'fm-merge.cpp' || echo '$(srcdir)/'`fm-merge.cpp
	$(am__mv) $(DEPDIR)/stride-fm-merge.Tpo $(DEPDIR)/stride-fm-merge.Po
#	source='fm-merge.cpp' object='stride-fm-merge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-fm-merge.o `test -f 'fm-merge.cpp' || echo '$(srcdir)/'`fm-merge.cpp

stride-fm-merge.obj: fm-merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-fm-merge.obj -MD -MP -MF $(DEPDIR)/stride-fm-merge.Tpo -c -o stride-fm-merge.obj `if test -f 'fm-merge.cpp'; then $(CYGPATH_W) 'fm-merge.cpp'; else $(CYGPATH_W) '$(srcdir)/fm-merge.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-fm-merge.Tpo $(DEPDIR)/stride-fm-merge.Po
#	source='fm-merge.cpp' object='stride-fm-merge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-fm-merge.obj `if test -f 'fm-merge.cpp'; then $(CYGPATH_W) 'fm-merge.cpp'; else $(CYGPATH_W) '$(srcdir)/fm-merge.cpp'; fi`

stride-OverlapCommon.o: OverlapCommon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-OverlapCommon.o -MD -MP -MF $(DEPDIR)/stride-OverlapCommon.Tpo -c -o stride-OverlapCommon.o `test -f 'OverlapCommon.cpp' || echo '$(srcdir)/'`OverlapCommon.cpp
	$(am__mv) $(DEPDIR)/stride-OverlapCommon.Tpo $(DEPDIR)/stride-OverlapCommon.Po
#	source='OverlapCommon.cpp' object='stride-OverlapCommon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-OverlapCommon.o `test -f 'OverlapCommon.cpp' || echo '$(srcdir)/'`OverlapCommon.cpp

stride-OverlapCommon.obj: OverlapCommon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-OverlapCommon.obj -MD -MP -MF $(DEPDIR)/stride-OverlapCommon.Tpo -c -o stride-OverlapCommon.obj `if test -f 'OverlapCommon.cpp'; then $(CYGPATH_W) 'OverlapCommon.cpp'; else $(CYGPATH_W) '$(srcdir)/OverlapCommon.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-OverlapCommon.Tpo $(DEPDIR)/stride-OverlapCommon.Po
#	source='OverlapCommon.cpp' object='stride-OverlapCommon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-OverlapCommon.obj `if test -f 'OverlapCommon.cpp'; then $(CYGPATH_W) 'OverlapCommon.cpp'; else $(CYGPATH_W) '$(srcdir)/OverlapCommon.cpp'; fi`

stride-kmerfreq.o: kmerfreq.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-kmerfreq.o -MD -MP -MF $(DEPDIR)/stride-kmerfreq.Tpo -c -o stride-kmerfreq.o `test -f 'kmerfreq.cpp' || echo '$(srcdir)/'`kmerfreq.cpp
	$(am__mv) $(DEPDIR)/stride-kmerfreq.Tpo $(DEPDIR)/stride-kmerfreq.Po
#	source='kmerfreq.cpp' object='stride-kmerfreq.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-kmerfreq.o `test -f 'kmerfreq.cpp' || echo '$(srcdir)/'`kmerfreq.cpp

stride-kmerfreq.obj: kmerfreq.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-kmerfreq.obj -MD -MP -MF $(DEPDIR)/stride-kmerfreq.Tpo -c -o stride-kmerfreq.obj `if test -f 'kmerfreq.cpp'; then $(CYGPATH_W) 'kmerfreq.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerfreq.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-kmerfreq.Tpo $(DEPDIR)/stride-kmerfreq.Po
#	source='kmerfreq.cpp' object='stride-kmerfreq.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-kmerfreq.obj `if test -f 'kmerfreq.cpp'; then $(CYGPATH_W) 'kmerfreq.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerfreq.cpp'; fi`

stride-grep.o: grep.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-grep.o -MD -MP -MF $(DEPDIR)/stride-grep.Tpo -c -o stride-grep.o `test -f 'grep.cpp' || echo '$(srcdir)/'`grep.cpp
	$(am__mv) $(DEPDIR)/stride-grep.Tpo $(DEPDIR)/stride-grep.Po
#	source='grep.cpp' object='stride-grep.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-grep.o `test -f 'grep.cpp' || echo '$(srcdir)/'`grep.cpp

stride-grep.obj: grep.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-grep.obj -MD -MP -MF $(DEPDIR)/stride-grep.Tpo -c -o stride-grep.obj `if test -f 'grep.cpp'; then $(CYGPATH_W) 'grep.cpp'; else $(CYGPATH_W) '$(srcdir)/grep.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-grep.Tpo $(DEPDIR)/stride-grep.Po
#	source='grep.cpp' object='stride-grep.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-grep.obj `if test -f 'grep.cpp'; then $(CYGPATH_W) 'grep.cpp'; else $(CYGPATH_W) '$(srcdir)/grep.cpp'; fi`

stride-FMIndexWalk.o: FMIndexWalk.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-FMIndexWalk.o -MD -MP -MF $(DEPDIR)/stride-FMIndexWalk.Tpo -c -o stride-FMIndexWalk.o `test -f 'FMIndexWalk.cpp' || echo '$(srcdir)/'`FMIndexWalk.cpp
	$(am__mv) $(DEPDIR)/stride-FMIndexWalk.Tpo $(DEPDIR)/stride-FMIndexWalk.Po
#	source='FMIndexWalk.cpp' object='stride-FMIndexWalk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-FMIndexWalk.o `test -f 'FMIndexWalk.cpp' || echo '$(srcdir)/'`FMIndexWalk.cpp

stride-FMIndexWalk.obj: FMIndexWalk.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-FMIndexWalk.obj -MD -MP -MF $(DEPDIR)/stride-FMIndexWalk.Tpo -c -o stride-FMIndexWalk.obj `if test -f 'FMIndexWalk.cpp'; then $(CYGPATH_W) 'FMIndexWalk.cpp'; else $(CYGPATH_W) '$(srcdir)/FMIndexWalk.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-FMIndexWalk.Tpo $(DEPDIR)/stride-FMIndexWalk.Po
#	source='FMIndexWalk.cpp' object='stride-FMIndexWalk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-FMIndexWalk.obj `if test -f 'FMIndexWalk.cpp'; then $(CYGPATH_W) 'FMIndexWalk.cpp'; else $(CYGPATH_W) '$(srcdir)/FMIndexWalk.cpp'; fi`

stride-scaffold.o: scaffold.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-scaffold.o -MD -MP -MF $(DEPDIR)/stride-scaffold.Tpo -c -o stride-scaffold.o `test -f 'scaffold.cpp' || echo '$(srcdir)/'`scaffold.cpp
	$(am__mv) $(DEPDIR)/stride-scaffold.Tpo $(DEPDIR)/stride-scaffold.Po
#	source='scaffold.cpp' object='stride-scaffold.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-scaffold.o `test -f 'scaffold.cpp' || echo '$(srcdir)/'`scaffold.cpp

stride-scaffold.obj: scaffold.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stride-scaffold.obj -MD -MP -MF $(DEPDIR)/stride-scaffold.Tpo -c -o stride-scaffold.obj `if test -f 'scaffold.cpp'; then $(CYGPATH_W) 'scaffold.cpp'; else $(CYGPATH_W) '$(srcdir)/scaffold.cpp'; fi`
	$(am__mv) $(DEPDIR)/stride-scaffold.Tpo $(DEPDIR)/stride-scaffold.Po
#	source='scaffold.cpp' object='stride-scaffold.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stride_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stride-scaffold.obj `if test -f 'scaffold.cpp'; then $(CYGPATH_W) 'scaffold.cpp'; else $(CYGPATH_W) '$(srcdir)/scaffold.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
